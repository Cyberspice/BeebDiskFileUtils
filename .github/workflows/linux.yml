---
# Linux CI build
#
# To reuse this configuration with your own repository:
#
#   - Create a .robuild.yaml to describe what should be built on RISC OS.
#       - `jobs.build.script` should be a list of commands to run on RISC OS
#       - `jobs.build.artifacts.path` should be the directory to zip.
#   - Create a VersionNum file if you wish to use the automated versioning
#     in the same style as the RISC OS sources. [optional]
#   - Update the 3rd step ('give the archive a versioned name') to give a
#     suitable name for the archive.
#   - Update the 4th step ('upload-artifacts') to include the same names.
#
# The 'release' job is triggered when a tag starting with a 'v' is created,
# which will create a GitHub release for the repository with the name of the
# version tag. The release will be a draft, and should be updated with
# changes as you see fit.
#

name: Linux

# Controls when the action will run. Triggers the workflow on:
#   * push on any branch.
#   * tag creation for tags beginning with a 'v'
on:
  push:
    branches: ["*"]
  # Pull request events happen on pull request state transitions, so we probably don't want this here.
  #pull_request:
  #  branches: ["*"]

jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      leafname: ${{ steps.version.outputs.leafname }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Run the CMake generation
        run: |
          set -e
          mkdir build
          cd build && cmake ../CMakeLists.txt

      - name: Build the code
        run: |
          cd build
          make
          cp dfsutils ..

      - name: Archive the results
        run: |
          zip -9r DFSUtils.zip dfsutils LICENSE

      - name: Give the output a versioned name
        id: version
        run: |
          if [[ -f RISCOS/VersionNum ]] ; then
              version=$(sed '/MajorVersion / ! d ; s/.*MajorVersion *"\(.*\)"/\1/' RISCOS/VersionNum)
          else
              version=$(git rev-parse --short HEAD)
          fi
          echo "This is version: $version"
          leafname="DFSUtils-linux-$version.zip"
          mv DFSUtils.zip "$leafname"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "leafname=$leafname" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: Linux-build
          path: ${{ steps.version.outputs.leafname }}
        # The artifact that is downloadable from the Actions is actually a zip of the artifacts
        # that we supply.
